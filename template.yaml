AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-rds-proxy-demo

  Sample SAM Template for serverless-rds-proxy-demo

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "Vpc where lambda function will be deployed"
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "Subnets where lambda function will be deployed. Provide at least two"
  RdsSecurityGroupId:
    Type: String
    Description: "The id of the existing Rds security group"
  RdsSecretArn:
    Type: String
    Description: "Rds secret"

Globals:
  Function:
    Timeout: 30

Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the AWS Lambda for accessing RDS
      GroupName: "lambda-sg"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      VpcId: !Ref VpcId

  SampleHttpApi:
    Type: AWS::Serverless::HttpApi

  RdsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rds/
      Handler: app.lambda_handler
      Runtime: python3.12
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref SubnetIds
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RdsSecretArn
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:gcp-gsheet-sa-9ilb6l"
      Events:
        NoProxy:
          Type: HttpApi
          Properties:
            Path: /no-proxy
            Method: get
            ApiId: !Ref SampleHttpApi

  MySQLInboundRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref RdsSecurityGroupId
      Description: "Lambda security group"
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

  SecretsManagerVPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      SubnetIds: !Ref SubnetIds
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup

Outputs:
  ApiBasePath:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${SampleHttpApi}.execute-api.${AWS::Region}.amazonaws.com"

  RdsApiPath:
    Description: "API Gateway endpoint URL for rds function"
    Value: !Sub "https://${SampleHttpApi}.execute-api.${AWS::Region}.amazonaws.com/no-proxy"

  LambdaSecurityGroupId:
    Description: "Security group id attached to lambda functions. Make sure traffic from this SG is allowed in database and proxy security group on db port"
    Value: !GetAtt LambdaSecurityGroup.GroupId
